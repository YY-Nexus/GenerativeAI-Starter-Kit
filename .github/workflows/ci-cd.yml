
name: CI/CD Pipeline

on:
  push:
    branches: [main, dev, test, pre-release]
  pull_request:
    branches: [main, dev, test, pre-release]


jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Run tests
        run: pytest --cov=.

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install linters
        run: pip install flake8 black isort bandit safety
      - name: Run flake8
        run: flake8 .
      - name: Run black
        run: black --check .
      - name: Run isort
        run: isort --check-only .
      - name: Run bandit
        run: bandit -r .
      - name: Run safety
        run: safety check


  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install docs tools
        run: pip install sphinx mkdocs mkdocs-material
      - name: Build Sphinx docs
        run: |
          cd docs && sphinx-build -b html . _build/html
      - name: Deploy Sphinx docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html
      - name: Build MkDocs docs
        run: mkdocs build
      - name: Deploy MkDocs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  build-and-publish-pypi:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Build package
        run: |
          python -m pip install --upgrade build twine
          python -m build
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: python -m twine upload dist/*

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          tags: yyc3/genai-starter-kit:latest

  notify:
    runs-on: ubuntu-latest
    needs: [test, lint, build-and-publish-pypi, build-and-push-docker]
    if: always()
    steps:
      - name: CI/CD 完成通知
        run: |
          echo "CI/CD 流程已完成！"
          echo "测试状态: ${{ needs.test.result }}"
          echo "代码检查状态: ${{ needs.lint.result }}"
          echo "PyPI 发布状态: ${{ needs.build-and-publish-pypi.result }}"
          echo "Docker 发布状态: ${{ needs.build-and-push-docker.result }}"

# Dependabot 自动依赖更新
# 需在 .github/dependabot.yml 配置
