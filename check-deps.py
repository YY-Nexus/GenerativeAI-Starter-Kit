import pkg_resources
from typing import Dict, List

# Êõ¥Êñ∞‰∏∫ÂΩìÂâçÂÆûÈôÖÁâàÊú¨
EXPECTED: Dict[str, str] = {
    "torch": "2.8.0",  # Â∑≤Êõ¥Êñ∞
    "transformers": "4.56.2",  # Â∑≤Êõ¥Êñ∞
    # "sentence-transformers": "2.2.2",  # Â∑≤‰ªéÈ°πÁõÆ‰∏≠ÁßªÈô§
    # "langchain": "0.3.26",  # Â∑≤‰ªéÈ°πÁõÆ‰∏≠ÁßªÈô§
    "numpy": "2.3.3",  # Ê†∏ÂøÉÊï∞ÂÄºËÆ°ÁÆóÂ∫ì
    "fastapi": "0.117.1",  # Web API Ê°ÜÊû∂
}


def check_versions():
    """Ê£ÄÊü•ÂÖ≥ÈîÆ‰æùËµñÁöÑÁâàÊú¨ÊòØÂê¶Á¨¶ÂêàË¶ÅÊ±Ç"""
    print("üîç Ê£ÄÊü•ÂÖ≥ÈîÆ‰æùËµñÁâàÊú¨...\n")

    success_count = 0
    total_count = len(EXPECTED)

    for pkg, expected_min in EXPECTED.items():
        try:
            installed = pkg_resources.get_distribution(pkg).version
            # Ê£ÄÊü•ÁâàÊú¨ÊòØÂê¶Â§ß‰∫éÁ≠â‰∫éÊúüÊúõÁöÑÊúÄ‰ΩéÁâàÊú¨
            if _version_compare(installed, expected_min) >= 0:
                print(f"‚úÖ {pkg:<20} ÁâàÊú¨ OK: {installed} (>= {expected_min})")
                success_count += 1
            else:
                print(f"‚ùå {pkg:<20} ÁâàÊú¨Ëøá‰Ωé: {installed} (ÊúüÊúõ >= {expected_min})")
        except pkg_resources.DistributionNotFound:
            print(f"‚ö†Ô∏è  {pkg:<20} Êú™ÂÆâË£Ö")
        except Exception as e:
            print(f"‚ùå {pkg:<20} Ê£ÄÊü•Â§±Ë¥•: {e}")

    print(f"\nüìä Ê£ÄÊü•ÁªìÊûú: {success_count}/{total_count} ‰æùËµñÁ¨¶ÂêàË¶ÅÊ±Ç")

    if success_count < total_count:
        print("‚ö†Ô∏è  Âª∫ËÆÆËøêË°å: python fix_vulnerabilities.py --auto-fix")
        return False
    else:
        print("‚ú® ÊâÄÊúâÂÖ≥ÈîÆ‰æùËµñÈÉΩÁ¨¶ÂêàË¶ÅÊ±ÇÔºÅ")
        return True


def _version_compare(v1: str, v2: str) -> int:
    """ÁÆÄÂçïÁöÑÁâàÊú¨ÊØîËæÉÂáΩÊï∞"""

    def normalize(v: str) -> List[int]:
        return [int(x) for x in v.split(".") if x.isdigit()]

    v1_parts = normalize(v1)
    v2_parts = normalize(v2)

    # Ë°•ÈΩêÂà∞Áõ∏ÂêåÈïøÂ∫¶
    max_len = max(len(v1_parts), len(v2_parts))
    v1_parts.extend([0] * (max_len - len(v1_parts)))
    v2_parts.extend([0] * (max_len - len(v2_parts)))

    if v1_parts > v2_parts:
        return 1
    elif v1_parts < v2_parts:
        return -1
    else:
        return 0


if __name__ == "__main__":
    check_versions()
